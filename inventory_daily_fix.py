# coding:utf-8
# from req import req
import pymysql
import requests



product_db_info = {
    "host": "localhost",
    "port": 3360,
    "database": "saas",
    "user": "root",
    "password": "abc@123",
}

test_db_info = {
    "host": "106.14.94.38",
    "port": 3306,
    "database": "hex-test",
    "user": "root",
    "password": "abc@123",
}


def getStoreIds(d):
    rows = d.split("\n")
    store_ids=[]
    for r in rows:
        columns = r.split(" ")
        store_ids.append(str(columns[4]))
    return store_ids


def getUUID(number):
    return req("http://localhost:32320/new/{}".format(number),opt="GET").json().get("payload")

'''
0 id
1 inventory_id
2 branch_id
3 product_id
4 start_quantity
5 start_quantity_lock
6 start_quantity_soon
7 start_quantity_avail
'''


def getIssueStoreIds():
    db = pymysql.connect(**product_db_info)
    cursor = db.cursor()
    sql = "select store_id from inventory_daily_history where date='2021-04-25' and store_id not in (select store_id from inventory_daily_history where date='2021-04-26')"
    result = []
    try:
        # Execute the SQL command
        cursor.execute(sql)
        # Fetch all the rows in a list of lists.
        results = cursor.fetchall()
        for row in results:
            result.append(row[0])
    except Exception as err:
        print ("Error: unable to fetch data - {}".format(err))

    # disconnect from server
    db.close()
    print(len(result))
    return result


def getEmptyInventoryDaily(store_id):
    db = pymysql.connect(**product_db_info)
    cursor = db.cursor()
    sql = "select daily2.id \
    , daily2.inventory_id \
    , daily2.branch_id \
    , daily2.product_id \
    , daily2.end_quantity \
    , daily2.end_quantity_lock \
    , daily2.end_quantity_soon \
    , daily2.end_quantity_avail \
    from inventory_daily daily2 \
		where daily2.branch_id={} and date='2021-04-27'".format(store_id)
    sql_end = "select daily2.id \
    , daily2.inventory_id \
    , daily2.branch_id \
    , daily2.product_id \
    , daily2.start_quantity \
    , daily2.start_quantity_lock \
    , daily2.start_quantity_soon \
    , daily2.start_quantity_avail \
    from inventory_daily daily2 \
		where daily2.branch_id={} and date='2021-04-29'".format(store_id)
    result = []
    result_end = dict()
    try:
        # Execute the SQL command
        cursor.execute(sql)
        # Fetch all the rows in a list of lists.
        results = cursor.fetchall()
        for row in results:
            result.append(dict(
                inventory_id = row[1],
                branch_id = row[2],
                product_id = row[3],
                start_quantity = row[4],
                start_quantity_lock = row[5],
                start_quantity_soon = row[6],
                start_quantity_avail = row[7]
            ))
        cursor.execute(sql_end)
        results = cursor.fetchall()
        for row in results:
            result_end[row[1]]= dict(
                inventory_id = row[1],
                branch_id = row[2],
                product_id = row[3],
                end_quantity = row[4],
                end_quantity_lock = row[5],
                end_quantity_soon = row[6],
                end_quantity_avail = row[7]
            )

    except Exception as err:
        print ("Error: unable to fetch data - {}".format(err))

    # disconnect from server
    db.close()
    for r in result:
        end_ = result_end.get(r["inventory_id"])
        if end_:
            r["end_quantity"] = end_.get("end_quantity")
            r["end_quantity_lock"] = end_.get("end_quantity_lock")
            r["end_quantity_soon"] = end_.get("end_quantity_soon")
            r["end_quantity_avail"] = end_.get("end_quantity_avail")
        else:

            r["end_quantity"] = r["start_quantity"]
            r["end_quantity_lock"] = r["start_quantity_lock"]
            r["end_quantity_soon"] = r["start_quantity_soon"]
            r["end_quantity_avail"] = r["start_quantity_avail"]
    return result


def insertMissingRecords(rows, store_id):
    
    sql = "insert into inventory_daily( \
        id \
        , inventory_id \
        , branch_id \
        , product_id \
        , start_quantity \
        , start_quantity_lock \
        , start_quantity_soon \
        , start_quantity_avail \
        , end_quantity \
        , end_quantity_lock \
        , end_quantity_soon \
        , end_quantity_avail \
        , date \
        , last_update_time \
        , created \
        ) values({},{},{},{}, {},{},{},{}, {},{},{},{},  '2021-04-28', '2021-05-09 10:30:00' ,'2021-05-09 10:30:00') "
    ids = getUUID(1)
    daily_sql ="INSERT INTO inventory_daily_history(id, store_id, partner_id, date, created) VALUES ({}, {}, 3805520638781685761, '2021-04-27', '2021-05-09 10:30:00')".format(ids[0], store_id)
    db = pymysql.connect(**product_db_info)
    cursor = db.cursor()
    try:

        cursor.execute(daily_sql)
        ids = getUUID(1000)
        i = 0
        for r in rows:
            cursor.execute(sql.format(
            ids[i],
            r.get("inventory_id"),
            r.get("branch_id"),
            r.get("product_id"), 
            r.get("start_quantity"), 
            r.get("start_quantity_lock"), 
            r.get("start_quantity_soon"), 
            r.get("start_quantity_avail"),
            r.get("end_quantity"), 
            r.get("end_quantity_lock"), 
            r.get("end_quantity_soon"), 
            r.get("end_quantity_avail")))
            i = i+1
            if i==1000:
                db.commit()
                print("---- commit one batch ----")
                ids = getUUID(1000)
                i = 0
        # Commit your changes in the database
        db.commit()
        print("---- commit final batch {} ----".format(i))
    except Exception as err:
        # Rollback in case there is any error
        print("error: {}".format(err))
        db.rollback()

    # disconnect from server
    db.close()


def updateStartQuantity():
    result = getIssueStoreIds()
    
    print(" Len of store id {}".format(len(result)))
    return
    db = pymysql.connect(**product_db_info)
    cursor = db.cursor()
    update_sql = "update inventory_daily d_final \
        inner join ( \
                select d4.inventory_id \
                    from inventory_daily d4 \
                    left join inventory_daily d3 on d3.date = '2021-04-25' and d3.inventory_id = d4.inventory_id \
                    where d4.date = '2021-04-26' and d4.branch_id = {} and d3.inventory_id is null \
            ) i_final1  on d_final.inventory_id = i_final1.inventory_id \
        left Join ( \
                select h.inventory_id, sum(case when h.take_in=0 then h.quantity else -h.quantity end) total \
                from inventory_history h \
                inner join ( \
                    select d2.inventory_id \
                    from inventory_daily d2  \
                    left join inventory_daily d1 on d1.date = '2021-04-25' and d1.inventory_id = d2.inventory_id \
                    where d2.date = '2021-04-26' and d2.branch_id = {} and d1.inventory_id is null \
                ) i on h.inventory_id = i.inventory_id \
                where h.created > '2021-04-26' and h.created< '2021-04-27 04:00:00' group by h.inventory_id \
                ) i_final2 on i_final2.inventory_id = d_final.inventory_id \
        set d_final.start_quantity = d_final.end_quantity + IFNULL(i_final2.total,0)  \
        , d_final.start_quantity_avail = d_final.end_quantity_avail+ IFNULL(i_final2.total,0) \
        where d_final.date = '2021-04-26'"
    finished_ids = getStoreIds(dataLog)
    i = len(finished_ids)
    try:
        for r in result:
            if str(r) not in finished_ids:
                cursor.execute(update_sql.format(r, r))
                db.commit()
                i = i+1
                print("---- {} commit store {} ----".format(i, r))
    except Exception as err:
        print ("Error: unable to update data - {}".format(err))

    # disconnect from server
    db.close()


def updateEndQuantity():
    # result = getIssueStoreIds()
    result = ['3850146175042715649',
'3850146175533449217',
'3850146178054225921',
'3850146180268818433',
'3850146180763746305',
'3850146182533742593',
'3850146183477460993',
'3850146183964000257',
'3850146184463122433',
'3850146187067785217',
'3850146191794765825',
'3850146192285499393',
'3850146197335441409',
'3850146197834563585',
'3850146198937665537',
'3850146200409866241',
'3850146202985168897',
'3850146203522039809',
'3850146209268236289',
'3850146213684838401',
'3850146214192349185',
'3850146214695665665',
'3850146217124167681',
'3850146219288428545',
'3850146224606806017',
'3850146225319837697',
'3850146227295354881',
'3850146228331347969',
'3850146229287649281',
'3850146231749705729',
'3850146232223662081',
'3850146232823447553',
'3850146233641336833',
'3850146234614415361',
'3850146237164552193',
'3850146237667868673',
'3850146238670307329',
'3850146239190401025',
'3850146239706300417',
'3850146240184451073',
'3850146240679378945',
'3850146244198400001',
'3850146244726882305',
'3850146245196644353',
'3850146247662895105',
'3850146248157822977',
'3850146248648556545',
'3850146249198010369',
'3850146252788334593',
'3850146254931623937',
'3850146261747367937',
'3850146262212935681',
'3850146263169236993',
'3850146266717618177',
'3850146267703279617',
'3850146270186307585',
'3850146271671091201',
'3850146272237322241',
'3850146273227177985',
'3850146277538922497',
'3850146278096764929',
'3850146279371833345',
'3850146279938064385',
'3850146280567209985',
'3850146281582231553',
'3850146284325306369',
'3850146284807651329',
'3850146286959329281',
'3850146287915630593',
'3850146288884514817',
'3850146289874370561',
'3850146292453867521',
'3850146292927823873',
'3850146295918362625',
'3850146297898074113',
'3850146298405584897',
'3850146299441577985',
'3850146300460793857',
'3850146303505858561',
'3850146310455820289',
'3850146310954942465',
'3850146311458258945',
'3850146314616569857',
'3850146315124080641',
'3850146315753226241',
'3850146317267369985',
'3850146317762297857',
'3850146318303363073',
'3850146320459235329',
'3850146320966746113',
'3850146321524588545',
'3850146322732548097',
'3850146323466551297',
'3850146324053753857',
'3850146325832138753',
'3850146326838771713',
'3850146327857987585',
'3850146333826482177',
'3850146335319654401',
'3850146340117938177',
'3850146340617060353',
'3850146341170708481',
'3850146343452409857',
'3850146343993475073',
'3850146344484208641',
'3850146344974942209',
'3850146345448898561',
'3850146346988208129',
'3850146347965480961',
'3850146348980502529',
'3850146351216066561',
'3850146353900421121',
'3850146356609941505',
'3850146363031420929',
'3850146364772057089',
'3850146366860820481',
'3850146367368331265',
'3850146369440317441',
'3850146370501476353',
'3850146371000598529',
'3850146372489576449',
'3850146373567512577',
'3850146374586728449',
'3850146375090044929',
'3850146377275277313',
'3850146379577950209',
'3850146380056100865',
'3850146381175980033',
'3850146382891450369',
'3850146384481091585',
'3850146385483530241',
'3850146385965875201',
'3850146400234897409',
'3850146403821027329',
'3850146405553274881',
'3850146406060785665',
'3850146406572490753',
'3850146410599022593',
'3850146413493092353',
'3850146413992214529',
'3863174282821500929',
'3863178864440115201',
'3869271134012702721',
'3873587551059050497',
'3875522205441851393',
'3876153153984397313',
'3878042887929200641',
'3878414640677388289',
'3883396195845931009',
'3885552343051141121',
'3891058106678902785',
'3891708784841588737',
'3893230750010441729',
'3893273023725174785',
'3898241725730127873',
'3902216432686989313',
'3906632910475624449',
'3918904884010680321',
'3939969521955577857',
'3949689889562189825',
'3953061342424817665',
'3957672566130307073',
'3966059407857238017',
'3966093447387537409',
'3966096594713075713',
'3968195667572068353',
'3970708804825374721',
'3974341319478169601',
'3977287272995196929',
'3982720005258338305',
'3984873648719810561',
'3985236110106099713',
'3993660809708044289',
'3994699034354524161',
'3994748449782210561',
'3995730255083913217',
'3997174071516418049',
'3997176235735457793',
'3997560956944306177',
'3999773029309284353',
'3999774685956632577',
'4002249564373131265',
'4005915785624084481',
'4011012255704674305',
'4014986850072223745',
'4015293472954216449',
'4016018515533459457',
'4016456551866130433',
'4022567895717613569',
'4024054442479214593',
'4027629077436919809',
'4027669931358277633',
'4028800153556328449',
'4030209818787983361',
'4034215829710839809',
'4034221029533986817',
'4036416347048091649',
'4036748517250641921',
'4037857286976069633',
'4038119643050315777',
'4038122496011173889',
'4038542360897060865',
'4040718116431642625',
'4041759819603394561',
'4041828426640879617',
'4048386376470007809',
'4049377085012537345',
'4076607790348185601',
'4079094118134743041',
'4080945562105540609',
'4083472353731731457',
'4083475493077458945',
'4085980156278366209',
'4086423399983869953',
'4087425920756776961',
'4091471121304784897',
'4096921136813035521',
'4096922839413235713',
'4096924580198096897',
'4100137793345470465',
'4103732800994172929',
'4110238706563067905',
'4113975942941487105',
'4114641263291166721',
'4116830373533507585',
'4116831979571179521',
'4117919376773586945',
'4118992973852532737',
'4121533209572458497',
'4122679299960795137',
'4125152715792138241',
'4126601657147342849',
'4129103498775916545',
'4132065546680377345',
'4134211913145315329',
'4134239761982926849',
'4134635867201208321',
'4139286224734511105',
'4139315531955630081',
'4140421607509770241',
'4146845449628708865',
'4150196479186903041',
'4152017109944692737',
'4152649549586010113',
'4153471261688762369',
'4154471226036903937',
'4154503143297040385',
'4157433946512678913',
'4159882551518461953',
'4159888449808629761',
'4160976205647978497',
'4162431335909015553',
'4165028107158962177',
'4165327831024205825',
'4165742820760801281',
'4167588597452136449',
'4168303011669086209',
'4168612141303578625',
'4168703113316777985',
'4170869525652410369',
'4178789021156511745',
'4180622686182809601',
'4202675140379578369',
'4207713452165398529',
'4208931230917259265',
'4211445258120372225',
'4211448913190735873',
'4213219671288963073',
'4214312227799261185',
'4216879674565529601',
'4224494527853682689',
'4225931375332503553',
'4225934705314746369',
'4230976043718021120',
'4233186903303655424',
'4233433928653869056',
'4246917558256549888',
'4258555715762786304',
'4258812682901131264',
'4261110271038197760',
'4262534297157636096',
'4264699648242880512',
'4264701090664026112',
'4267164412483211264',
'4267167954568744960',
'4267169396348162048',
'4273761756603486208',
'4275957033708032000',
'4275958556798226432',
'4285358875844022272',
'4287529483126181888',
'4289357921629769728',
'4290406980945739776',
'4292608821691482112',
'4292615657425502208',
'4296602450353225728',
'4296966128328015872',
'4297230402816344064',
'4300494279360446464',
'4302055864797265920',
'4303125910155984896',
'4303129458742689792',
'4303131624928772096',
'4304888050655199232',
'4307010121820569600',
'4348048881001463808',
'4361451488617201664',
'4365069702291062784',
'4365071990074146816',
'4372965043023708160',
'4372967935851921408',
'4372975937875116032',
'4387941392733732864',
'4387947305460891648',
'4388256959403458560',
'4391895151423848448',
'4391897109522087936',
'4400596504904007680',
'4400604720048177152',
'4401656886586277888',
'4404589051254996992',
'4407845446486097920',
'4408222122382491649',
'4414362017975042048',
'4416842214259326976',
'4416880132327800832',
'4416887417410224128',
'4417276235204329472',
'4422362271861211136',
'4423789834601005056',
'4427409902698266624',
'4429875275636965376',
'4429880672435372032',
'4432465507276357632',
'4433920505130582016',
'4436382378778198016',
'4436386345595764736',
'4439652755734298624',
'4439653981540614144',
'4441458834847891456',
'4441467270625001473'
]
    print("---len of store: {}---".format(len(result)))
    db = pymysql.connect(**product_db_info)
    cursor = db.cursor()
    
    update_sql = "update inventory_daily d_final  \
        left Join ( \
                select h.inventory_id, sum(case when h.take_in=0 then -h.quantity else h.quantity end) total \
                from inventory_history h \
                inner join ( \
                    select d2.inventory_id \
                    from inventory_daily d2  \
                    where d2.date = '2021-04-27' and d2.branch_id = {} \
                ) i on h.inventory_id = i.inventory_id  \
                where h.created > '2021-04-27' and h.created< '2021-04-28 04:00:00' group by h.inventory_id \
                ) i_final2 on i_final2.inventory_id = d_final.inventory_id \
        set d_final.end_quantity = d_final.start_quantity + IFNULL(i_final2.total,0)  \
        , d_final.end_quantity_avail = d_final.start_quantity_avail+ IFNULL(i_final2.total,0) \
 where d_final.date = '2021-04-27' and d_final.branch_id={}"
    
    
    try:
        exist_ids=[]
        i=0
        for r in result:
            if r not in exist_ids:
                cursor.execute(update_sql.format(r, r))
                db.commit()
            i = i+1
            print("---- {} commit store {} ----".format(i, r))
    except Exception as err:
        print ("Error: unable to update data - {}".format(err))

    # disconnect from server
    db.close()


def do():
    # missingRecords = getEmptyInventoryDaily()
    # insertMissingRecords(missingRecords)
    # store_ids = getIssueStoreIds()
    store_ids = [
'4372975937875116032',
'4387941392733732864',
'4387947305460891648',
'4388256959403458560',
'4391895151423848448',
'4391897109522087936',
'4400596504904007680',
'4400604720048177152',
'4401656886586277888',
'4404589051254996992',
'4407845446486097920',
'4408222122382491649',
'4414362017975042048',
'4416842214259326976',
'4416880132327800832',
'4416887417410224128',
'4417276235204329472',
'4422362271861211136',
'4423789834601005056',
'4427409902698266624',
'4429875275636965376',
'4429880672435372032',
'4432465507276357632',
'4433920505130582016',
'4436382378778198016',
'4436386345595764736',
'4439652755734298624',
'4439653981540614144',
'4441458834847891456',
'4441467270625001473'
]
    for s in store_ids:
        # if s!=3850146131107381249:
        #     continue

        print("!--{}--!".format(s))
        missingRecords = getEmptyInventoryDaily(s)
        for r in missingRecords:
            print(r)
        # return
        insertMissingRecords(missingRecords, s)
        # break
        

    print(len(store_ids))


# def re_calculate():
#     url = 'http://localhost:4155/pub?topic=1201.material.loss.daily'
#     db = pymysql.connect(**product_db_info)
#     cursor = db.cursor()
#     sql="select DISTINCT(branch_id) from inventory_daily where date ='2021-04-26'"
#     result = []
#     try:
#         # Execute the SQL command
#         cursor.execute(sql)
#         # Fetch all the rows in a list of lists.
#         results = cursor.fetchall()
#         for row in results:
#             result.append(row[0])
#     except Exception as err:
#         print ("Error: unable to fetch data - {}".format(err))
#     db.close()
#     print(" Len of store id {}".format(len(result)))
#     i = 0
#     print(result)
#     for store_id in result:
#         i = i + 1
#         body = '{"branch_id":"'+str(store_id)+'","start_date":"2021-04-26","end_date":"2021-04-26"}'
#         # req = requests.post(url,data=body)
#         # print("{} {} {}".format(i, store_id, req.text))

def re_calculate():
    # 1201 是DQ   1101 是PPJ
    url = 'http://localhost:4155/pub?topic=1201.material.loss.daily'

    # result 是门店ID
    result = [4010288854749007873,4038119643050315777,4167588597452136449,4304888050655199232,4427401656923095040]
    print(" Len of store id {}".format(len(result)))
    i = 0
    for store_id in result:
        i = i + 1
        body = '{"branch_id":"'+str(store_id)+'","start_date":"2021-12-01","end_date":"2021-12-01"}'
        req = requests.post(url, data=body)
        print("{} {} {}".format(i, store_id, req.text))
    

# updateStartQuantity()
# do()
# re_calculate()

# updateEndQuantity()


if __name__ == '__main__':
    # it = ['3995354263162851329', '3850146171293007873', '4241179079203622912', '3850146077491593217', '3979829786309996545', '3850146067915997185', '3850146385483530241', '3968195667572068353', '3850146179299934209', '3850146293410168833', '4439652755734298624', '3850146407067418625', '4202675140379578369', '3850146239706300417', '3876159232373948417', '4261110271038197760', '3850146224606806017', '4079163645891452929', '4118992973852532737', '4365069702291062784', '4152017109944692737', '4246917558256549888', '3850146273751465985', '3850146120185413633', '3896474707003703297', '3850146089889955841', '3850146140825583617', '3850146298405584897', '3939969521955577857', '3850146279371833345', '3850146292927823873', '3850146413992214529', '3850146311458258945', '4036748517250641921', '3850146370501476353', '3850146121133326337', '3995730255083913217', '3850146157984481281', '3869271134012702721', '3850146160463314945', '4258812682901131264', '4297230402816344064', '4037857286976069633', '4157433946512678913', '3850146123163369473', '3883396195845931009', '3994748449782210561', '3850146066296995841', '3850146218231463937', '4168303011669086209', '4264701090664026112', '3850146067429457921', '4441467270625001473', '4253850283970400257', '3850146243653140481', '4258555715762786304', '3850146175533449217', '3850146182533742593', '3850146151290372097', '3850146357935341569', '4264699648242880512', '3850146229287649281', '3850146247662895105', '4420917981876355072', '3999773029309284353', '3850146177555103745', '4407845446486097920', '3850146327857987585', '3850146289874370561', '4179865584621322241', '3850146237667868673', '3850146315753226241', '3850146193325686785', '3850146070461939713', '3850146302448893953', '3850146292453867521', '4091471121304784897', '3850146322732548097', '3850146267703279617', '3850146406572490753', '3850146126221017089', '3850146125256327169', '3863190461975887873', '3850146227295354881', '4036411317603905537', '4416887417410224128', '4160976205647978497', '4441458834847891456', '3850146194864996353', '4296602450353225728', '4079094118134743041', '3850146222857781249', '3850146355414564865', '4302799970209136640', '3850146100228915201', '4080945562105540609', '4290406980945739776', '3850146341170708481', '4041828426640879617', '3850146318303363073', '3876153153984397313', '4436386345595764736', '3850146262699474945', '3850146333826482177', '4389377608666611712', '3850146385965875201', '3850146123696046081', '3850146155870552065', '3850146335319654401', '4198046181180911617', '4087425920756776961', '3850146356609941505', '4401656886586277888', '3850146306223767553', '4022567895717613569', '4233433928653869056', '4287532561766289408', '3850146249198010369', '3850146410599022593', '3850146368945389569', '4400596504904007680', '4253851784402976768', '4027629077436919809', '3850146096793780225', '3850146125742866433', '3850146102749691905', '4224486993269325825', '4168318777077153793', '3850146343993475073', '4296966128328015872', '4015293472954216449', '3850146063193210881', '3893230750010441729', '4115407112690946049', '3850146369440317441', '3850146364772057089', '4041759819603394561', '4036409149526679553', '4216038488840843265', '3850146219288428545', '4167588597452136449', '4110238706563067905', '3850146237164552193', '3850146069987983361', '3850146111314460673', '3850146324053753857', '3850146063688138753', '3850146228331347969', '3850146217124167681', '4124761600778395649', '3850146263169236993', '4390804055180476416', '4122677878704488449', '4159888449808629761', '3850146139856699393', '3966096594713075713', '3850146343452409857', '4292612759085940736', '3850146214192349185', '4217975891788771329', '4040718116431642625', '3850146216599879681', '3850146225319837697', '3850146254931623937', '3850146303505858561', '3994699034354524161', '4267169396348162048', '4432440369235427328', '3850146242680061953', '4154504983742676993', '3850146094247837697', '3850146287915630593', '4416842214259326976', '3850146262212935681', '4124764025048219649', '3850146303988203521', '3850146377275277313', '3974341319478169601', '3850146183477460993', '3850146191794765825', '3850146101822750721', '4180622686182809601', '4287529483126181888', '3850146320459235329', '4307011575247568896', '3850146288884514817', '4129103498775916545', '4429875275636965376', '3970708804825374721', '4289357921629769728', '4008482139026063361', '4292608821691482112', '3850146261747367937', '4134635867201208321', '4348048881001463808', '3850146122685218817', '4387941392733732864', '4208931230917259265', '4083475493077458945', '4134239761982926849', '4016018515533459457', '3850146167618797569', '3977287272995196929', '4230973845076447232', '4225934705314746369', '3850146244198400001', '3850146175042715649', '3878042887929200641', '4388256959403458560', '3850146320966746113', '3893273023725174785', '4420811831902240768', '4165729105024806913', '4164637527304241153', '4140421607509770241', '4400606041526566912', '3850146336464699393', '3850146413493092353', '3850146381175980033', '4005915785624084481', '4400604720048177152', '3850146113315143681', '3850146300460793857', '3850146400234897409', '4139315531955630081', '4273761756603486208', '4165028107158962177', '4230976043718021120', '4225931375332503553', '4016456551866130433', '3850146233641336833', '3850146117169709057', '3850146173973168129', '4165742820760801281', '4083472353731731457', '4307010121820569600', '3850146271671091201', '3850146209268236289', '4171169440537362433', '3850146198937665537', '3907309584703815681', '3850146354420514817', '3850146361487917057', '4216879674565529601', '3850146248157822977', '3850146071627956225', '4372975937875116032', '4403786764840402944', '3850146184463122433', '3850146197335441409', '3891058106678902785', '3850146154901667841', '3850146244726882305', '4049377085012537345', '4208926120304644097', '3873587551059050497', '3850146133250670593', '4284187678389309440', '3906632910475624449', '3850146126778859521', '4049375426659905537', '4092169478572806145', '3850146340617060353', '4224494527853682689', '3850146370006548481', '4170864870309396481', '4391897109522087936', '4117919376773586945', '3850146317762297857', '3850146234614415361', '3850146183964000257', '3997560956944306177', '4267167954568744960', '3850146274363834369', '3850146095871033345', '3850146127424782337', '3850146365829021697', '3850146277538922497', '3850146405028986881', '3850146149830754305', '4102278598728146945', '3850146174447124481', '4114641263291166721', '3953061342424817665', '4170869525652410369', '4126611687771553793', '3850146286959329281', '4116831979571179521', '3850146231267360769', '4085980156278366209', '4213219671288963073', '4414360281961005056', '3902216432686989313', '3878414640677388289', '3850146348980502529', '3997174071516418049', '3850146281057943553', '3850146407616872449', '3850146366860820481', '4429880672435372032', '3850146128976674817', '4436382378778198016', '4361451488617201664', '3850146065198088193', '4303131624928772096', '3850146310954942465', '3850146382409105409', '3850146116548952065', '3850146106943995905', '4302055864797265920', '3850146096315629569', '4154503143297040385', '3850146232823447553', '4076607790348185601', '3875522205441851393', '4122679299960795137', '3850146137394642945', '4391899144959066112', '3850146155367235585', '4275958556798226432', '4150196479186903041', '3850146073200820225', '3850146108848209921', '3850146344974942209', '3850146408111800321', '4103732800994172929', '4003764052900802561', '3863178864440115201', '4146845449628708865', '3850146145112162305', '4372965043023708160', '4387947305460891648', '3850146315124080641', '4096921136813035521', '3850146346455531521', '3850146224061546497', '3850146347965480961', '3850146248648556545', '4276282522205163520', '4178789021156511745', '4034215829710839809', '4039272368507375617', '3850146112304316417', '4432465507276357632', '3850146353900421121', '4211448913190735873', '4281385379476541440', '4014986850072223745', '4038122496011173889', '4304888050655199232', '4405936798340022272', '3850146088338063361', '4152649549586010113', '4134215215138557953', '3850146131585531905', '4300231256288854016', '3850146062694088705', '3850146288393781249', '3850146279938064385', '3850146093790658561', '4303124525293305856', '3850146375090044929', '4295434461952114688', '3850146264356225025', '3850146380056100865', '3850146270186307585', '3850146197834563585', '4365071990074146816', '3850146282081353729', '4383485710831779840', '3850146068947795969', '3850146121645031425', '3984873648719810561', '3850146129471602689', '4214312227799261185', '4267160793012768768', '3850146328948506625', '3970723154399453185', '3966100462889066497', '4439653981540614144', '3850146301450649601', '3850146240679378945', '4267164412483211264', '3850146344484208641', '3850146345448898561', '3850146338947727361', '4121533209572458497', '4115405479240224769', '4159882551518461953', '4403788646925271040', '3850146340117938177', '3966059407857238017', '3850146217749118977', '3850146057908387841', '4024083696136933377', '3850146318802485249', '3850146117631082497', '3850146232223662081', '3850146321524588545', '3850146202985168897', '3850146245670600705', '4168612141303578625', '3982720005258338305', '4417276235204329472', '3850146346988208129', '3850146404366286849', '3850146376176369665', '3850146080528269313', '4289354905203773440', '3850146371000598529', '4208132735067004929', '4300494279360446464', '3850146238670307329', '4168703113316777985', '3850146192285499393', '4402074319969124352', '3898241725730127873', '3850146280567209985', '3850146086857474049', '3850146367368331265', '3850146382891450369', '4262534297157636096', '3850146178054225921', '3863171950377435137', '4429879332502044672', '4292613943221878784', '3850146326838771713', '4275959968726781952', '3850146297898074113', '4292615657425502208', '3850146403821027329', '3850146252788334593', '3850146240184451073', '3850146372489576449', '3863174282821500929', '3896481459271106561', '4207713452165398529', '3850146150820610049', '4132065546680377345', '3949689889562189825', '4114581614087012353', '4002249564373131265', '3885552343051141121', '4038119643050315777', '3850146072571674625', '3850146101369765889', '3850146180268818433', '3850146118616743937', '4114237766378766337', '3850146324682899457', '4030209818787983361', '4048386376470007809', '4421619118006927360', '3850146317267369985', '4024054442479214593', '3957672566130307073', '4285358875844022272', '3850146351216066561', '4036416347048091649', '4028800153556328449', '4408222122382491649', '3850146239190401025', '3850146284325306369', '3850146323466551297', '3850146379577950209', '4113975942941487105', '3850146051738566657', '3850146187067785217', '4244779874385936384', '4096924580198096897', '4423794107384659968', '3850146148555685889', '3918904884010680321', '3850146299441577985', '3850146374586728449', '4087873879549825025', '3850146106012860417', '4422362271861211136', '4420800342109749248', '3850146363031420929', '3850146256487710721', '4275957033708032000', '3850146065764319233', '4034221029533986817', '3850146360992989185', '3850146094847623169', '3850146295918362625', '4427409902698266624', '3850146068461256705', '3850146170768719873', '4134211913145315329', '3850146202389577729', '3850146146630500353', '3850146172320612353', '3850146109762568193', '4303129458742689792', '3850146203522039809', '4086423399983869953', '4100137793345470465', '4162431335909015553', '3850146325832138753', '3850146405553274881', '4423789834601005056', '3850146378927833089', '3850146245196644353', '4154471226036903937', '4401661382624313344', '3850146213684838401', '4027669931358277633', '3850146134831923201', '4433920505130582016', '3850146159033057281', '3850146314616569857', '3997176235735457793', '4391895151423848448', '4126605730021203969', '3850146157518913537', '3850146281582231553', '4372967935851921408', '3850146364088385537', '4153471261688762369', '3873324792933253121', '3850146259968983041', '4223316429929222145', '3966093447387537409', '4211050697250721793', '3850146272237322241', '4285363821876350976', '3850146406060785665', '4416880132327800832', '3850146139198193665', '3993660809708044289', '4307740354441936896', '4398055515450572800', '4233186903303655424', '4011012255704674305', '4303125910155984896', '4414362017975042048', '3850146278096764929', '4038542360897060865', '3850146104419024897', '4211445258120372225', '3850146108353282049', '3850146383977775105', '4118997338543366145', '4139286224734511105', '4408849400971984896', '4165730245892542465', '4051987334999449601', '3850146319918170113', '3850146231749705729', '3850146273227177985', '4096922839413235713', '4126601657147342849', '4116830373533507585', '3850146095304802305', '3850146076438822913', '4290408081153622016', '4091478386262851585', '3850146342244450305', '4436387402715561984', '3850146294953672705', '4421631425105690624', '3850146060026511361', '3850146214695665665', '4165327831024205825', '3850146173453074433', '3850146099742375937', '3850146276049944577', '3850146310455820289', '3999774685956632577', '3850146365283762177', '3850146077982326785', '3936702061001609217', '3985236110106099713', '3850146075960672257', '4125152715792138241', '3850146064724131841', '3850146361974456321', '3850146159527985153', '3850146373567512577', '4007676009175732225', '3850146255996977153', '3850146075474132993', '3850146158500380673', '3850146180763746305', '3850146284807651329', '3850146104876204033', '3850146266717618177', '4166039404921270273', '4165681062380634113', '3850146200409866241', '4083478285200453633', '3958032643133870081', '3850146384481091585', '4404589051254996992', '3891708784841588737', '3850146243179184129']
    # updateStartQuantity()
    # do()
    # updateEndQuantity()
    re_calculate()
    pass







